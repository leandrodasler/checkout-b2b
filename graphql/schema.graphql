directive @CheckSchemas on FIELD | FIELD_DEFINITION

scalar CostCenter
scalar InvoiceData
scalar CostCenterDeliveryOptions
scalar UpdatedOrderForm
scalar Address
scalar OrderFormConfiguration

enum SavedCartStatus {
  open
  pending
  approved
  denied
  orderPlaced
}

enum OrderFormConfigurationState {
  ready
  updated
}

type CheckOrderFormConfigurationResponse {
  state: OrderFormConfigurationState!
  data: OrderFormConfiguration!
}

type SavedCart {
  id: ID!
  createdIn: String!
  lastInteractionIn: String!
  title: String!
  email: String!
  orderFormId: String!
  organizationId: String!
  costCenterId: String!
  data: String!
  parentCartId: String
  childrenQuantity: Int
  status: SavedCartStatus!
  requestedDiscount: Int
  roleId: String
}

type RepresentativeBalanceSettings {
  enabled: Boolean!
  openingBalance: Float
  allowNegativeBalance: Boolean!
}

type AppSettings {
  salesRepresentative: Int!
  salesManager: Int!
  salesAdmin: Int!
  rolesAllowedToSeeMargin: [String]!
  representativeBalance: RepresentativeBalanceSettings!
}

type B2BOrder {
  costId: String!
  costCenterName: String!
  orderGroup: String!
  value: Float!
}

input ItemsUpdatePriceInput {
  index: Int!
  price: Int!
}

type RepresentativeBalance {
  id: ID!
  email: String!
  balance: Float!
  createdIn: String!
  lastInteractionIn: String!
}

type RepresentativeBalanceTransaction {
  id: ID!
  email: String!
  oldBalance: Float!
  newBalance: Float!
  orderGroup: String!
  createdIn: String!
  lastInteractionIn: String!
}

input AddItemsToCartInput {
  seller: String!
  id: Int!
  quantity: Int!
}

input UpdateItemsQuantityInput {
  index: Int!
  quantity: Int!
}

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
}

type RepresentativeBalanceTransactionResponse {
  data: [RepresentativeBalanceTransaction]!
  pagination: Pagination!
}

type Query {
  checkOrderFormConfiguration: CheckOrderFormConfigurationResponse!

  getCart(id: ID!): SavedCart @CheckSchemas

  getSavedCarts(parentCartId: ID, getAll: Boolean): [SavedCart!]! @CheckSchemas

  getAppSettings: AppSettings!

  getRepresentativeBalances: [RepresentativeBalance]! @CheckSchemas

  getRepresentativeBalanceByEmail(email: String): RepresentativeBalance
    @CheckSchemas

  getRepresentativeBalanceTransactions(
    email: String!
    page: Int
    pageSize: Int
    sort: String
  ): RepresentativeBalanceTransactionResponse! @CheckSchemas
}

type Mutation {
  saveCart(
    id: ID
    title: String
    additionalData: String
    parentCartId: String
  ): SavedCart! @CheckSchemas

  updateSavedCartStatus(id: ID!, status: SavedCartStatus!): [SavedCart!]!
    @CheckSchemas

  updateSavedCartTitle(id: ID!, title: String!): SavedCart! @CheckSchemas

  deleteCart(id: ID!): ID @CheckSchemas

  clearCart: UpdatedOrderForm!

  placeOrder(poNumber: String, invoiceData: InvoiceData): String

  updatePrices(
    items: [ItemsUpdatePriceInput]!
    title: String
    additionalData: String
  ): UpdatedOrderForm!

  saveRepresentativeBalance(
    email: String
    balance: Float!
    orderGroup: String!
    overwrite: Boolean
  ): RepresentativeBalance! @CheckSchemas

  saveRepresentativeBalanceSettings(
    enabled: Boolean!
    openingBalance: Float
    allowNegativeBalance: Boolean!
  ): RepresentativeBalanceSettings!

  shareCart(
    email: String!
    subject: String!
    title: String!
    linkLabel: String!
    linkHref: String!
    sentByLabel: String!
    userLabel: String!
    sentByName: String!
    sentByEmail: String!
    roleLabel: String!
    sentByRole: String!
    organizationLabel: String!
    sentByOrganization: String!
    costCenterLabel: String!
    sentByCostCenter: String!
    footerLine1: String!
    footerLine2: String!
  ): String!

  addItemsToCart(orderItems: [AddItemsToCartInput!]!): UpdatedOrderForm!

  updateItemsQuantity(
    orderItems: [UpdateItemsQuantityInput!]!
  ): UpdatedOrderForm!

  addAddressToCart(address: Address!): UpdatedOrderForm!

  updateShippingOption(
    addressId: String
    itemIndexes: [Int!]
    selectedSla: String!
  ): UpdatedOrderForm!

  uploadSpreadsheet(file: Upload!): UpdatedOrderForm!
}
